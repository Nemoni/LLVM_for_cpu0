//===-- AirSubtarget.h - Define Subtarget for the Air ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Air specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_AIR_AIRSUBTARGET_H
#define LLVM_LIB_TARGET_AIR_AIRSUBTARGET_H

#include "AirFrameLowering.h"
#include "AirISelLowering.h"
#include "AirInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "AirGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class AirTargetMachine;

class AirSubtarget : public AirGenSubtargetInfo {
  virtual void anchor();

protected:
  enum AirArchEnum {
    Air32I,
    Air32II
  };

  // Air architecture version
  // Controled by -mcpu in commandline
  AirArchEnum AirArchVersion;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  bool EnableOverflow;

  // HasCmp - cmp instructions.
  bool HasCmp;

  // HasSlt - slt instructions.
  bool HasSlt;

  InstrItineraryData InstrItins;

  const AirTargetMachine &TM;

  Triple TargetTriple;

  const SelectionDAGTargetInfo TSInfo;

  std::unique_ptr<const AirInstrInfo> InstrInfo;
  std::unique_ptr<const AirFrameLowering> FrameLowering;
  std::unique_ptr<const AirTargetLowering> TLInfo;

public:
  bool isPositionIndependent() const;
  const AirABIInfo &getABI() const;

  // This constructor initializes the data members to match that
  // of the specified triple.
  AirSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                bool little, const AirTargetMachine &_TM);

  // Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasAir32I() const { return AirArchVersion >= Air32I; }
  bool isAir32I() const { return AirArchVersion == Air32I; }
  bool hasAir32II() const { return AirArchVersion >= Air32II; }
  bool isAir32II() const { return AirArchVersion == Air32II; }

  // Features related to the presence of specific instructions.
  bool enableOverflow() const { return EnableOverflow; }
  bool disableOverflow() const { return !EnableOverflow; }
  bool hasCmp()   const { return HasCmp; }
  bool hasSlt()   const { return HasSlt; }

  bool abiUsesSoftFloat() const;

  bool enableLongBranchPass() const {
    return hasAir32II();
  }

  unsigned stackAlignment() const { return 8; }

  AirSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const AirInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }
  const AirRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }
  const AirTargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};
} // End llvm namespace

#endif
